################################################
# Parameters
################################################
Parameters:
  Application:
    Type: String
  Module:
    Type: String
  Environment:
    Type: String
    Default: dev2
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 1
    Description: CloudWatch Logs retention period for Lambda functions
  NodeLayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Node Layer NodeDependenciesLayer ARN
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  ApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: API Id
  SearchItem:
    Type: String
    Description: Search Item i.e. Table to search
    Default: ${Appplication}-${Environment}-Category
##############################################################
# Data Sources for Category
##############################################################
Resources:
  ##########################
  # Roles #
  ##########################
  ManageCategoryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ManageCategoryFunctionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageCategory-Function

  ##########################
  # Manage Category #
  ##########################
  ManageCategoryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ManageCategory
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt ManageCategoryFunctionRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageCategory-Function

  CreateCategoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageCategoryDataSource.Name
      FieldName: createCategory
      TypeName: Mutation
      RequestMappingTemplate: !Sub |
        #if($context.identity.claims.containsKey("m_account"))
          #set($accountId = $context.identity.claims.get("m_account"))
        #else
          #set($accountId = "NONE")
        #end
        #if($context.identity.claims.containsKey("m_group"))
          #set($group = $context.identity.claims.get("m_group"))
        #else
          #set($group = "NONE")
        #end
        #if($accountId == $context.arguments.input.merchantAccountId &&  $group == "M_ADMIN")
        ##
        {
          "version": "2018-05-29",
            "operation": "Invoke",
            "payload": {
            "field": "createCategory",
            "identity": $context.identity,
            "body": $util.toJson($context.arguments)
          }
        }
        #else
            $utils.unauthorized()
        #end
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  UpdateCategoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageCategoryDataSource.Name
      FieldName: updateCategory
      TypeName: Mutation
      RequestMappingTemplate: !Sub |
        #if($context.identity.claims.containsKey("m_group"))
          #set($group = $context.identity.claims.get("m_group"))
        #else
          #set($group = "NONE")
        #end
        #if($context.identity.claims.containsKey("m_stores"))
          #set($stores = $context.identity.claims.get("m_stores").split(","))
        #else
          #set($stores = "NONE")
        #end
        #if( ($stores.contains($context.arguments.input.id) &&  $group == "M_MANAGER" )|| $group == "M_ADMIN")
        ##
        {
          "version": "2018-05-29",
            "operation": "Invoke",
            "payload": {
            "field": "updateCategory",
            "identity": $context.identity,
            "body": $util.toJson($context.arguments)
          }
        }
        #else
            $utils.unauthorized()
        #end
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  DeleteCategoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageCategoryDataSource.Name
      FieldName: deleteCategory
      TypeName: Mutation
      RequestMappingTemplate: !Sub |
        #if($context.identity.claims.containsKey("m_group"))
          #set($group = $context.identity.claims.get("m_group"))
        #else
          #set($group = "NONE")
        #end
        #if( $group == "M_ADMIN")
        ##
        {
          "version": "2018-05-29",
            "operation": "Invoke",
            "payload": {
            "field": "deleteCategory",
            "identity": $util.toJson($context.identity),
            "body": $util.toJson($context.arguments)
          }
        }
        #else
            $utils.unauthorized()
        #end
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ########################
  # Get Category  #
  ########################
  GetCategoryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetCategoryTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-Category"

  CategoryTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: CategoryTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt GetCategoryRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Sub ${Application}-${Environment}-Category

  listCategorysResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt CategoryTableDataSource.Name
      FieldName: listCategorys
      TypeName: Query
      RequestMappingTemplate: !Sub |
        #if($context.identity.claims.containsKey("m_account"))
          #set($accountId = $context.identity.claims.get("m_account"))
        #else
          $utils.unauthorized()
        #end   
        #if($context.identity.claims.containsKey("m_group"))
          #set($group = $context.identity.claims.get("m_group"))
        #else
          #set($group = "NONE")
        #end
        #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
        #if($group == "M_ADMIN")
          #set( $modelQueryExpression = {} )
          #set( $modelQueryExpression.expression = "#merchantAccountId = :merchantAccountId" )
          #set( $modelQueryExpression.expressionNames = {
          "#merchantAccountId": "merchantAccountId"
          } )
          #set( $modelQueryExpression.expressionValues = {
          ":merchantAccountId": {
              "S": "$accountId"}
          } )        
          #set( $ListRequest = {
            "version": "2018-05-29",
            "limit": $limit,
            "index": "byMerchantAccountId",
            "select": "ALL_ATTRIBUTES"
          } )
          #if( $context.args.nextToken )
            #set( $ListRequest.nextToken = $context.args.nextToken )
          #end
          #if( $context.args.filter )
            #set( $ListRequest.filter = $util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)") )
          #end
          $util.qr($ListRequest.put("operation", "Query"))
          $util.qr($ListRequest.put("query", $modelQueryExpression))
          #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == "DESC" )
            #set( $ListRequest.scanIndexForward = false )
          #else
            #set( $ListRequest.scanIndexForward = true )
          #end
        #else 
          #if($context.identity.claims.containsKey("m_stores"))
            #set($stores = $context.identity.claims.get("m_stores").split(","))
            #set($ids = [])
            #foreach($id in $stores)
                #set($map = {})
                $util.qr($map.put("id", $util.dynamodb.toString($id)))
                $util.qr($ids.add($map))
            #end
            #set($idJson = $util.toJson($ids))
          	#set( $ListRequest = {
              "version": "2018-05-29",
              "operation": "BatchGetItem",
              "tables": {
                  "${Application}-${Environment}-Category":{
                    "keys": $ids  
                  }
              }
            } )            
          #end
        #end
        $util.toJson($ListRequest)
      ResponseMappingTemplate: !Sub |
        #if( $ctx.error )
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          #if($context.identity.claims.containsKey("m_stores"))
              #set($ctx.result.items = $ctx.result.data["${Application}-${Environment}-Category"])
              $util.qr($ctx.result.remove("data"))
              $util.toJson($ctx.result)
          #else
              $util.toJson($ctx.result)
          #end
        #end

  GetCategoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt CategoryTableDataSource.Name
      FieldName: getCategory
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: |
        #if($context.identity.claims.containsKey("m_account"))
          #set($accountId = $context.identity.claims.get("m_account"))
        #else
          $utils.unauthorized()
        #end   
        #if($context.identity.claims.containsKey("m_group"))
          #set($group = $context.identity.claims.get("m_group"))
        #else
          #set($group = "NONE")
        #end
        #if($context.identity.claims.containsKey("m_stores"))
          #set($stores = $context.identity.claims.get("m_stores").split(","))
        #else
          #set($stores = [])
        #end
        #if( $ctx.error )
          $util.error($ctx.error.message, $ctx.error.type)
        #else
          #if(($group == "M_ADMIN" && $accountId == context.reslut["merchantAccountId]) || ($stores.containsKey(context.reslut["id])))
            $util.toJson($ctx.result)
          #end
        #end

  ########################
  # Search Category  #
  ########################
  SearchCategoryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SearchCategoryFunctionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-CategorySearch-Function

  SearchCategoryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: SearchCategory
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt SearchCategoryFunctionRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-CategorySearch-Function

  SearchCategorysResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt SearchCategoryDataSource.Name
      FieldName: searchCategorys
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.args)
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)
